# coding=utf-8
"""
"""
from __future__ import absolute_import

import sqlalchemy as sa

import wtforms.fields
from wtforms.ext.sqlalchemy.fields import QuerySelectField
from flask_wtf.file import FileField
from flask_wtf.html5 import TelField, IntegerField

from abilian.core.sqlalchemy import JSON, JSONList, JSONDict
from abilian.web.forms.validators import email, url, required, optional
from abilian.web.forms.filters import strip, uppercase, lowercase
import abilian.web.forms.fields as awbff
from abilian.web.forms import widgets as abilian_widgets

__all__ = (
    'COLUMN_TYPES',
    'FORM_FIELDS',
    'FORM_FILTERS',
    'LIST_GENERATORS',
    'VALIDATORS',
    'WIDGETS',
)

# Postgres crops identifiers names silently. This can be a problem with alembic
# autogenerated revsions since intended column name will differ from actual name
# in database
#
MAX_IDENTIFIER_LENGTH = 63

COLUMN_TYPES = (
    sa.types.Integer,
    sa.types.UnicodeText,
    sa.types.LargeBinary,
    sa.types.Date,
    sa.types.Text,
    sa.types.Float,
    sa.types.Boolean,
    JSON,
    JSONList,
    JSONDict,
)
COLUMN_TYPES = {t.__name__: t for t in COLUMN_TYPES}
COLUMN_TYPES['PhoneNumber'] = sa.types.UnicodeText
COLUMN_TYPES['EmailAddress'] = sa.types.UnicodeText

FORM_FIELDS = (
    wtforms.fields.SelectField,
    wtforms.fields.BooleanField,
    wtforms.fields.TextField,
    wtforms.fields.TextAreaField,
    wtforms.fields.FloatField,
    wtforms.fields.DecimalField,
    wtforms.fields.IntegerField,
    QuerySelectField,
    FileField,
    TelField,
    IntegerField,
    awbff.Select2Field,
    awbff.Select2MultipleField,
    awbff.DateField,
)
FORM_FIELDS = {t.__name__: t for t in FORM_FIELDS}


VALIDATORS = {
  'email': email,
  'url': url,
  'required': required,
  'optional': optional,
}


FORM_FILTERS = {
  'strip': strip,
  'uppercase': uppercase,
  'lowercase': lowercase,
}


WIDGETS = (
    abilian_widgets.BooleanWidget,
    abilian_widgets.URLWidget,
    abilian_widgets.EmailWidget,
    abilian_widgets.MoneyWidget,
)
WIDGETS = {t.__name__: t for t in WIDGETS}

LIST_GENERATORS = {}

def update(module):
  """
  Install new column types, form fields, widgets, validators found in `module`.
  """
  for attr in __all__:
    values = getattr(module, attr, None)
    if values is None:
      continue

    definitions = globals()[attr]
    definitions.update(values)
